// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.  Do not, however,
// modify the contents of the 'gui' subpackage.

// We have indicated parts of the file that you might especially want to
// fill in with "// FIXME"  or "// REPLACE..." comments.  But again,
// you can change just about anything.

// Comments that start with "//" are intended to be removed from your
// solutions.

package game2048;

import ucb.util.CommandArgs;

import game2048.gui.Game;
import static game2048.Main.Side.*;

/** The main class for the 2048 game.
 *  @author
 */
public class Main {

    /** Size of the board: number of rows and of columns. */
    static final int SIZE = 4;
    /** Number of squares on the board. */
    static final int SQUARES = SIZE * SIZE;

    /** Symbolic names for the four sides of a board. */
    static enum Side { NORTH, EAST, SOUTH, WEST };

    /** The main program.  ARGS may contain the options --seed=NUM,
     *  (random seed); --log (record moves and random tiles
     *  selected.); --testing (take random tiles and moves from
     *  standard input); and --no-display. */
    public static void main(String... args) {
        CommandArgs options =
            new CommandArgs("--seed=(\\d+) --log --testing --no-display",
                            args);
        if (!options.ok()) {
            System.err.println("Usage: java game2048.Main [ --seed=NUM ] "
                               + "[ --log ] [ --testing ] [ --no-display ]");
            System.exit(1);
        }

        Main game = new Main(options);

        while (game.play()) {
            /* No action */
        }
        System.exit(0);
    }

    /** A new Main object using OPTIONS as options (as for main). */
    Main(CommandArgs options) {
        boolean log = options.contains("--log"),
            display = !options.contains("--no-display");
        long seed = !options.contains("--seed") ? 0 : options.getLong("--seed");
        _testing = options.contains("--testing");
        _game = new Game("2048", SIZE, seed, log, display, _testing);
    }

    /** Reset the score for the current game to 0 and clear the board. */
    void clear() {
        _score = 0;
        _count = 0;
        _game.clear();
        _game.setScore(_score, _maxScore);
        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                _board[r][c] = 0;
            }
        }
    }

    /** Play one game of 2048, updating the maximum score. Return true
     *  iff play should continue with another game, or false to exit. */
    boolean play() {
        setRandomPiece();

        while (true) {
            // FIXME?

            setRandomPiece();
            if (gameOver()) {
                // FIXME?
            }

        GetMove:
            while (true) {
                String key = _game.readKey();

                if (key == "↑")
                    key = "Up";

                if (key == "←")
                    key = "Left";

                if (key == "→")
                    key = "Right";

                if (key == "↓")
                    key = "Down";

                switch (key) {
                case "Up": case "Down": case "Left": case "Right":
                    if (!gameOver() && tiltBoard(keyToSide(key))) {

                        break GetMove;

                    }
                    break;
                
                case "Quit":
                    return false;
                default:
                    break;
                }
            }
            // FIXME?
        }
    }

    /** Return true iff the current game is over (no more moves
     *  possible). */
    boolean gameOver() {
        // FIXME?
        return false;
    }

    /** Add a tile to a random, empty position, choosing a value (2 or
     *  4) at random.  Has no effect if the board is currently full. */
    void setRandomPiece() {
        int[] tileValue = _game.getRandomTile();
        if (_count == SQUARES) {
            return;
        } 
        while (_board[tileValue[1]][tileValue[2]] != 0) {
            tileValue = _game.getRandomTile();
        } _board[tileValue[1]][tileValue[2]] =  tileValue[0];
        _game.addTile(tileValue[0], tileValue[1], tileValue[2]);
          // _board[tileValue[1]][tileValue[2]] =  tileValue[0];
            //_board[tileValue[1]][tileValue[2]] = tileValue[0];
            
    }

        
     /** Perform the result of tilting the board toward SIDE.
     *  Returns true iff the tilt changes the board. **/
    boolean tiltBoard(Side side) {
        /* As a suggestion (see the project text), you might try copying
         * the board to a local array, turning it so that edge SIDE faces
         * north.  That way, you can re-use the same logic for all
         * directions.  (As usual, you don't have to). */
        int[][] board = new int[SIZE][SIZE];
        // FIXME?

        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                board[r][c] =
                    _board[tiltRow(side, r, c)][tiltCol(side, r, c)];
                // FIXME?
            }
        }

        for(int r=1; r <SIZE; r++) {
            for(int c = 0; c < SIZE; c++) {
                int j = r;
                if(board[r][c] != 0) { //then it is occupied
                    // int j = r;
                    while (j > 0) { //i want to check the spot above but necessarily if its empty
                        if (board[j-1][c] == 0) {
                        // board[r - 1][c] = board[r][c];
                        //_game.moveTile(_board[r][c], r, c, r - 1, c);
                        _game.moveTile(board[j][c], tiltRow(side, j, c), tiltCol(side, j, c), 
                            tiltRow(side, j - 1, c), tiltCol(side, j - 1, c));
                        board[j - 1][c] = board[j][c];
                        
                        board[j][c] = 0;
                        
            

                        } else if (board[j-1][c] == board[j][c]) {
                            // board[r - 1][c] = 2 * board[r - 1][c];
                            //_game.mergeTile(board[r][c], 2 * board[r][c], r, c, r - 1, c);
                            _game.mergeTile(board[j][c], 2 * board[j][c], tiltRow(side, j, c),
                             tiltCol(side, j, c), tiltRow(side, j - 1, c), tiltCol(side, j - 1, c));
                            board[j - 1][c] = 2 * board[j - 1][c];
                            board[j][c] = 0;
                            
                            

                        } j--; 
                    } 
                } 
            }
        }

        _game.displayMoves();

        // for(int r=1; r <SIZE; r++) {
        //     for(int c = 0; c < SIZE; c++) {
        //         if(board[r][c] != 0) {
        //             while (board[r-1][c] == 0) {
        //                 board[r-1][c] = board[r][c];
        //                 _game.moveTile(board[r][c], r, c, r - 1, c);
                        
        //                 board[r][c] = 0;
        //             }
        //         }
        //     }
        // }
                    

        // for (int r = 0; r < SIZE; r += 1) {
        //     for (int c = 0; c < SIZE; c += 1) {
        //         if(board[r][c] != 0) {
        //             int j = r;
        //             int temp = 3
        //             while (j < SIZE) {
        //                 if (board[j-1][c] == 0) {
        //                     temp = board[j-1][c];
        //                     j++;
        //                 else if (board[j-1][c] != 0 && board[j-1][c] == board[j][c]) {
        //                     temp = board[j-1][c];
        //                     j++;

        //                 }

        //                 }
        //             } if (temp == board[j-1][c]) {
        //                 merge();
        //               else if (temp == 0)

        //               }
        //             }
        //         }

        // for(int c=0; c < SIZE; c++) {
        //     for(int r = 0; r < SIZE; r++) {
        //         if (board[r][c] == 0) {
        //             int emptySpace = r;
        //             int occupied = r + 1;
        //             while (occupied < SIZE) {
        //                 if (board[occupied][c] != 0) {
        //                 board[emptySpace][c] = board[occupied][c];
        //                 _game.moveTile(_board[tiltRow(side, occupied, c)][c],tiltRow(side, occupied, c), tiltCol(side, occupied, c), tiltRow(side, emptySpace, c), tiltCol(side, emptySpace, c));
        //                 board[occupied][c] = 0;
        //                 }
        //             } occupied ++;
        //         }
        //     }
        // }
         /* maybe change up the thing so that when you find an occupied tile, check if the things 
         above it are either a zero or the same number, if it you have an empy space move up, then 
         check it again if you can go up again if you can't then move to the nearest unoccupied space
         merge if theres anything above you, that you can merge or do nothing. if you do nothing continue
         your iteration*/
                          
                                        
                        
         // _game.displayMoves();
           
            
        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                _board[tiltRow(side, r, c)][tiltCol(side, r, c)]
                    = board[r][c];
            }
        }
        //_game.displayMoves();
        return true;
    }

    /** Return the row number on a playing board that corresponds to row R
     *  and column C of a board turned so that row 0 is in direction SIDE (as
     *  specified by the definitions of NORTH, EAST, etc.).  So, if SIDE
     *  is NORTH, then tiltRow simply returns R (since in that case, the
     *  board is not turned).  If SIDE is WEST, then column 0 of the tilted
     *  board corresponds to row SIZE - 1 of the untilted board, and
     *  tiltRow returns SIZE - 1 - C. */
    int tiltRow(Side side, int r, int c) {
        switch (side) {
        case NORTH:
            return r;
        case EAST:
            return c;
        case SOUTH:
            return SIZE - 1 - r;
        case WEST:
            return SIZE - 1 - c;
        default:
            throw new IllegalArgumentException("Unknown direction");
        }
    }

    /** Return the column number on a playing board that corresponds to row
     *  R and column C of a board turned so that row 0 is in direction SIDE
     *  (as specified by the definitions of NORTH, EAST, etc.). So, if SIDE
     *  is NORTH, then tiltCol simply returns C (since in that case, the
     *  board is not turned).  If SIDE is WEST, then row 0 of the tilted
     *  board corresponds to column 0 of the untilted board, and tiltCol
     *  returns R. */
    int tiltCol(Side side, int r, int c) {
        switch (side) {
        case NORTH:
            return c;
        case EAST:
            return SIZE - 1 - r;
        case SOUTH:
            return SIZE - 1 - c;
        case WEST:
            return r;
        default:
            throw new IllegalArgumentException("Unknown direction");
        }
    }

    /** Return the side indicated by KEY ("Up", "Down", "Left",
     *  or "Right"). */
    Side keyToSide(String key) {
        switch (key) {
        case "Up":
            return NORTH;
        case "Down":
            return SOUTH;
        case "Left":
            return WEST;
        case "Right":
            return EAST;
        default:
            throw new IllegalArgumentException("unknown key designation");
        }
    }

    /** Represents the board: _board[r][c] is the tile value at row R,
     *  column C, or 0 if there is no tile there. */
    private final int[][] _board = new int[SIZE][SIZE];

    /** True iff --testing option selected. */
    private boolean _testing;
    /** THe current input source and output sink. */
    private Game _game;
    /** The score of the current game, and the maximum final score
     *  over all games in this session. */
    private int _score, _maxScore;
    /** Number of tiles on the board. */
    private int _count;
}
